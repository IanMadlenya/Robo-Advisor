as(realData, 'matrix')
gloseri
as(realData, 'matrix') # user*item(7*5)
trainData <-sample(1:7, 6)
trainSet <- realData[trainData]
trainSet
as(trainSet, 'matrix')
trainSet2 <- trainSet[rowCounts(trainSet) >= 3 ]
as(trainSet2, 'matrix') # 전체 6명중 5명 선정
recomm_model_gl <- Recommender(trainSet2, method="UBCF", parameter ="Cosine")
recomm_model_gl # learned using 5 users.
recomm_target_gl <- realData[-trainData ]  # 1 x 5 rating matrix
recomm_target_gl # 1 x 5 rating matrix of class ‘binaryRatingMatrix’ with 3 ratings.
as(recomm_target_gl, 'matrix')
recommandList <- predict(recomm_model_gl, recomm_target_gl, n=2) # 사용자 당 Top2개 추천
recomm_result <- as(recommandList, 'list')
recomm_result
realData_b <- binarize(realData, minRating=1) # 1이상은 1, 나머지는 0(2진화)
as(realData_b, 'matrix') # FALSE(NA)/TRUE(숫자) 이진화
gloseri <- read.csv(file.choose(), header = T) # gloseri.csv
realData <- as(gloseri, 'realRatingMatrix')
as(realData, 'matrix') # user*item(7*5)
realData_b <- binarize(realData, minRating=1) # 1이상은 1, 나머지는 0(2진화)
as(realData_b, 'matrix') # FALSE(NA)/TRUE(숫자) 이진화
trainData <- sample(1:7, 6) # 7명중 6명 랜덤 선정
trainSet <- realData_b[trainData ]
trainSet # 6 x 5 rating matrix of class ‘binaryRatingMatrix’ with 19 ratings.
as(trainSet, 'matrix')
recomm_target_gl <- realData_b[-trainData ]  # 1 x 5 rating matrix
recomm_target_gl # 1 x 5 rating matrix of class ‘binaryRatingMatrix’ with 3 ratings.
as(recomm_target_gl, 'matrix')
recomm_model_gl <- Recommender(trainSet, method="IBCF", parameter ="Jaccard")# Jaccard : binary 유사도
recomm_model_gl # learned using 6 users.
recommandList <- predict(recomm_model_gl, recomm_target_gl, n=2)
recomm_result <- as(recommandList, 'list')
recomm_result
setClass('car', representation = list(
cc = 'numeric',
door = 'numeric',
name = 'character'
))
car
sonata
sonata <- new('car', cc=2500, door=4, name='sonata')
sonata
sonata$cc
sonata$door
sonata$name
sonata@cc
sonata@door
sonata@name
str(sonata)
data(MovieLense) # recommenderlab 패키지에서 제공
MovieLense # 943 x 1664 rating matrix of class ‘realRatingMatrix’ with 99392 ratings.
head(as(MovieLense, "matrix")[, c(1:5)])
head(as(MovieLense[1,], "list")[[1]]) # 1번 사용자의 6개 영화 평점 보기
head(as(MovieLense[2,], "list")[[1]]) # 2번 사용자의 6개 영화 평점 보기
str(MovieLense) # class 구조 보기
MovieLense@data # data 보기
getRatingMatrix(MovieLense) # 사용자 별 영화평점을 matrix로 제공
rowCounts(MovieLense) # 943명 사용자별 영화평점 합계 보기
table(rowCounts(MovieLense) >= 50)
head(rowCounts(MovieLense) >= 50)
head(rowCounts(MovieLense))
str(MovieLense) # class 구조 보기
MovieLense@data # data 보기
getRatingMatrix(MovieLense) # 사용자 별 영화평점을 matrix로 제공
rowCounts(MovieLense) # 943명 사용자별 영화평점 합계 보기
table(rowCounts(MovieLense) >= 50)
head(rowCounts(MovieLense) >= 50)
head(rowCounts(MovieLense))
table(colCounts(MovieLense) >= 100)
image(MovieLense[1:100,1:100]) # 이미지 개괄확인 : 1 row는 모두 채워짐
image(sample(MovieLense, 500), main = "Raw ratings")
rowCounts(MovieLense) # 943명 사용자별 영화 관람 횟수 보기
ratings_movies = MovieLense[ rowCounts(MovieLense) >= 50, colCounts(MovieLense) >= 100]
ratings_movies # 565 x 332 rating matrix of class
idx <-sample(1:nrow(ratings_movies), nrow(ratings_movies)*0.9)
trainSet <-ratings_movies[idx, ] # 90%
recomm_target <-ratings_movies[-idx, ] # 10%
dim(trainSet) # 508 336
dim(recomm_target) # 57 336
recomm_model <- Recommender(trainSet, method="UBCF", parameter ="Cosine") # 508명 대상 모델 생성
recomm_list <- predict(recomm_model, recomm_target, n=5) # 5개씩 영화 추천
recomm_list
as(recomm_list, "list")
length(as(recomm_list, "list"))
library(recommenderlab)
data("MovieLense")
getRatingMatrix(MovieLense) # 사용자 별 영화평점을 matrix로 제공
MovieLense@data # data 보기
str(MovieLense) # class 구조 보기
head(as(MovieLense, "matrix")[, c(1:5)])
ratings_movids <- MovieLense[rowCounts(MovieLense)>=100, colCounts(MovieLense) >= 150]
idx <- sample(nrow(ratings_movies), nrow(ratings_movies)*0.95)
trainSet <- ratings_movies[idx,]  # 95%
target <- ratings_movies[-idx,]   # 5%
dim(trainSet)
dim(target)
recomm_model <- Recommender(trainSet, method="UBCF", parameter="Cosine") # 536명 대상 모델 생성
recomm_list <- predict(recomm_model, target, n=3)  # 3개씩 영화 추천
recomm_list
as(recomm_list,"list")
df <- data.frame(target, list)
df <- as.data.frame(target, list)
recomm_list
list
recomm_movie <- as(recomm_list,"list")
recomm_movie
df <- data.frame(target, reomm_movie)
recomm_movie <- as(recomm_list,"list")
df <- data.frame(target, reomm_movie)
df <- data.frame(target, recomm_movie)
df <- as.data.frame(target, recomm_movie)
re_list <- as(recomm_list,"list")
re_list[[1]]
re_list[[1]][1] # 첫번째 사용자 추천영화 보기
re_list[[1]][2] # 첫번째 사용자 추천영화 보기
for(i in 1:length(re_list)){
one[i] <- re_list[[i]][1]
two[i] <- re_list[[i]][2]
three[i] <- re_list[[i]][3]
}
one <- character()
two <- character()
three <- character()
for(i in 1:length(re_list)){
one[i] <- re_list[[i]][1]
two[i] <- re_list[[i]][2]
three[i] <- re_list[[i]][3]
}
df <- data.frame(one, two, three)
df
df <- as.data.frame(one, two, three)
df
one
df <- data.frame(one, two, three)
df
one <- character()
two <- character()
three <- character()
for(i in 1:length(re_list)){
one[i] <- re_list[[i]][1]
two[i] <- re_list[[i]][2]
three[i] <- re_list[[i]][3]
}
df <- data.frame(one, two, three)
df
library(DBI)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111')
library(rJava)
library(RJDBC) # rJava에 의존적이다.
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
library(stringi)
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
library(RJDBC) # rJava에 의존적이다.
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/work", "scott", "tiger")
dbWriteTable(conn, recomm_movie)
dbWriteTable(conn, "recomm_movie", df, overwrite = TRUE)
query <- "select * from recomm_movie"
dbGetQuery(conn, query)
data(MovieLense) # recommenderlab 패키지에서 제공
MovieLense # 943 x 1664 rating matrix of class ‘realRatingMatrix’ with 99392 ratings.
ratings_movies = MovieLense[ rowCounts(MovieLense) >= 50, colCounts(MovieLense) >= 100]
ratings_movies # 560 x 332 rating matrix of class
ratings_movies_b <- binarize(ratings_movies, minRating=1) # 1이상은 1, 나머지는 0(2진화)
as(ratings_movies_b, 'matrix') # FALSE(NA)/TRUE(숫자) 이진화
idx <-sample(1:nrow(ratings_movies), nrow(ratings_movies)*0.9)
trainSet <-ratings_movies_b[idx, ] # 90%
recomm_target <-ratings_movies_b[-idx, ] # 10%
dim(trainSet) # 508 336
dim(recomm_target) # 57 336
recomm_model <- Recommender(trainSet, method="IBCF", parameter ="Jaccard") # 508명 대상 모델 생성
recomm_list <- predict(recomm_model, recomm_target, n=5) # 57명 사용자에게 5개씩 영화 추천
recomm_list  # Recommendations as ‘topNList’ with n = 5 for 57 users.
head(as(recomm_list, "list")) # 6명 추천영화 보기
data("MovieLense")
ratings_movies <- MovieLense[rowCounts(MovieLense) >= 100, colCounts(MovieLense) >= 50]
ratings_movids
ratings_movies_b <- binarize(ratings_movies, minRating=1)
as(rating_movies_b, 'matrix')
ratings_movies_b <- binarize(ratings_movies, minRating=1)
as(ratings_movies_b, 'matrix')
idx <- sample(nrow(ratings_movies), nrow(ratings_movies)*0.9)
trainSet <- ratings_movies_b[idx,]
target <- ratings_movies_b[-idx,]
dim(trainSet)
dimg(target)
dim(target)
recomm_model <- Recommender(trainSet, method="IBCF", parameter="Jaccard")
recomm_list <- predict(recomm_model, target , n = 10)
re_vec <- unlist(as(recomm_list, 'list'))
t <- table(re_vec)
max(t)   # 최대 빈도수
which(t==1)
which(t==16)
which(t==14)
ratings_movies = MovieLense[ rowCounts(MovieLense) >= 50, colCounts(MovieLense) >= 100]
eval_scheme = evaluationScheme(data=ratings_movies,
method="split", train=0.8, given=15,
goodRating=5, k=5)
eval_scheme
ubcf_method <- list("UBCF_cosine" = list(name="UBCF", param=list(method="Cosine")),
"UBCF_pearson" = list(name="UBCF", param=list(method="Pearson")) )
ubcf_method
result <- evaluate(eval_scheme, ubcf_method, type="topNList", n=c(1,3,5)) # Top10에서 1,3,5번째 출력
result # 평가 객체 정보
avg(result) # recommenderlab 패키지 제공 함수 : 혼돈matrix 정보 제공
eval_scheme = evaluationScheme(data=ratings_movies,
method="cross-validation", train=0.8, given=15,
goodRating=5, k=5)
ubcf_method <- list("UBCF_cosine" = list(name="UBCF", param=list(method="Cosine")),
"UBCF_pearson" = list(name="UBCF", param=list(method="Pearson")) )
ubcf_method
result <- evaluate(eval_scheme, ubcf_method, type="topNList", n=c(2,4,6)) # Top10에서 1,3,5번째 출력
result # 평가 객체 정보
avg(result)
dbWriteTable(conn, "recomm_movie", df, overwrite = TRUE)
query <- "select * from recomm_movie"
dbGetQuery(conn, query)
avg(result)
eval_scheme = evaluationScheme(data=ratings_movies,
method="cross-validation", train=0.8, given=20,
goodRating=5, k=3)
ubcf_method <- list("UBCF_cosine" = list(name="UBCF", param=list(method="Cosine")),
"UBCF_pearson" = list(name="UBCF", param=list(method="Pearson")) )
ubcf_method
result <- evaluate(eval_scheme, ubcf_method, type="topNList", n=c(2,4,6)) # Top10에서 1,3,5번째 출력
result # 평가 객체 정보
avg(result)
library(Rserve)
Rserve::Rserve(args ="--RS- encoding utf8")
library(rJava)
library(recommenderlab)
library(rJava)
library(reshape2)
Rserve::Rserve(args = "--RS- encoding utf-8")
Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(args="--RS- encoding utf8")
movie <- read.csv("C:/NCS/Rwork-II/data/movie.csv", encoding = "utf-8")
movie # user movie1 movie2 movie3 movie4 movie5
library(rJava)
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(args="--RS- encoding utf8")
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(args="--RS- encoding utf8")
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(args="--RS- encoding utf8")
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product2.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_t <- t(retire[,-c(1,6,7,8,9,10)])
retire_t
colnames(retire_t) <- c('aaaa','bbbb','cccc','dddd','eeee','ffff','gggg')
retire_t
cor(retire_t)
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product2.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_t <- t(retire[,-c(1,6,7,8,9,10)])
retire_t
colnames(retire_t) <- c('aaaa','bbbb','cccc','dddd','eeee','ffff','gggg')
retire_t
cor(retire_t)
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_t <- t(retire[,-c(1,6,7,8,9,10)])
retire_t
colnames(retire_t) <- c('aaaa','bbbb','cccc','dddd','eeee','ffff','gggg')
retire_t
cor(retire_t)
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(args="--RS- encoding utf8")
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
retire_long
names(retire_long) <- c('사용자','조건','rating')
# 0점 제외
retire_long <- subset(retire_long, rating != 0)
retire_long
retire_real <- as(retire_long, "realRatingMatrix")
dim(retire_real)
retire_real
# 내용 보기
as(retire_real, "matrix")
# 추천 모델 생성
# 학습데이터 생성
trainSet <- retire_real[c(1:(nrow(retire_real)-1)),]  # 학습데이터
trainSet
as(trainSet, 'matrix')
# 추천 대상자 선정
recommTarget <- retire_real[nrow(retire_real),] # 마지막 행 데이터
recommTarget
as(recommTarget, 'matrix')
# 추천 모델생성
recomm_model <- Recommender(trainSet, method="UBCF", parameter = "Pearson")
recomm_model
# 상품추천
recomm_list <- predict(recomm_model, recommTarget, n=2)
recomm_result <- as(recomm_list,"list")
#recomm_result    # list형식으로 반환되서 java에서 string으로 형변환X
unlist(recomm_result)   # character형
recomm_result
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
retire_long
names(retire_long) <- c('사용자','조건','rating')
retire_long <- subset(retire_long, rating != 0)
retire_long
retire_real <- as(retire_long, "realRatingMatrix")
dim(retire_real)
retire_real
as(retire_real, "matrix")
trainSet <- retire_real[c(1:(nrow(retire_real)-1)),]  # 학습데이터
trainSet
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
retire_long
names(retire_long) <- c('사용자','조건','rating')
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
library(recommenderlab)
library(rJava)
library(reshape2)
retire_long <- melt(id=1, retire)
retire_long
names(retire_long) <- c('사용자','조건','rating')
retire_long <- subset(retire_long, rating != 0)
retire_long
retire_real <- as(retire_long, "realRatingMatrix")
dim(retire_real)
retire_real
as(retire_real, "matrix")
trainSet <- retire_real[c(1:(nrow(retire_real)-1)),]  # 학습데이터
trainSet
as(trainSet, 'matrix')
recommTarget <- retire_real[nrow(retire_real),] # 마지막 행 데이터
recommTarget
as(recommTarget, 'matrix')
recomm_model <- Recommender(trainSet, method="UBCF", parameter = "Pearson")
recomm_model
recomm_list <- predict(recomm_model, recommTarget, n=2)
recomm_result <- as(recomm_list,"list")
unlist(recomm_result)   # character형
recomm_list <- predict(recomm_model, recommTarget, n=3)
recomm_result <- as(recomm_list,"list")
unlist(recomm_result)   # character형
recomm_list <- predict(recomm_model, recommTarget, n=5)
recomm_result <- as(recomm_list,"list")
unlist(recomm_result)   # character형
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(args="--RS- encoding utf8")
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product2.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
retire_long
retire_long <- subset(retire_long, rating != 0)
retire_long
retire_real <- as(retire_long, "realRatingMatrix")
dim(retire_real)
retire_real
as(retire_real, "matrix")
trainSet <- retire_real[c(1:(nrow(retire_real)-1)),]  # 학습데이터
trainSet
as(trainSet, 'matrix')
recommTarget <- retire_real[nrow(retire_real),] # 마지막 행 데이터
recommTarget
as(recommTarget, 'matrix')
recomm_model <- Recommender(trainSet, method="UBCF", parameter = "Pearson")
recomm_model
recomm_list <- predict(recomm_model, recommTarget, n=2)
recomm_result <- as(recomm_list,"list")
unlist(recomm_result)   # character형
retire <- read.csv("C:/NCS/Rwork-II/data/retire.csv")
retire
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product2.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
retire_long
names(retire_long) <- c('사용자','조건','rating')
retire_long <- subset(retire_long, rating != 0)
retire_long
retire_real <- as(retire_long, "realRatingMatrix")
dim(retire_real)
retire_real
as(retire_real, "matrix")
trainSet <- retire_real[c(1:(nrow(retire_real)-1)),]  # 학습데이터
trainSet
as(trainSet, 'matrix')
recommTarget <- retire_real[nrow(retire_real),] # 마지막 행 데이터
recommTarget
as(recommTarget, 'matrix')
recomm_model <- Recommender(trainSet, method="UBCF", parameter = "Pearson")
recomm_model
recomm_list <- predict(recomm_model, recommTarget, n=2)
recomm_result <- as(recomm_list,"list")
unlist(recomm_result)   # character형
retire <- read.csv("C:/NCS/Rwork-II/data/retire.csv")
recomm_result
unlist(recomm_result)   # character형
recomm_list
recomm_result <- as(recomm_list,"list")
recomm_result
recomm_model
recomm_list <- predict(recomm_model, recommTarget, n=2)
recomm_result <- as(recomm_list,"list")
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(args="--RS- encoding utf8")
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(args="--RS- encoding utf8")
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
retire_long
library(recommenderlab)
library(rJava)
library(reshape2)
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
retire_long
names(retire_long) <- c('사용자','조건','rating')
retire_long <- subset(retire_long, rating != 0)
retire_long
retire_real <- as(retire_long, "realRatingMatrix")
dim(retire_real)
retire_real
as(retire_real, "matrix")
trainSet <- retire_real[c(1:(nrow(retire_real)-1)),]  # 학습데이터
trainSet
as(trainSet, 'matrix')
recommTarget <- retire_real[nrow(retire_real),] # 마지막 행 데이터
recommTarget
as(recommTarget, 'matrix')
recomm_model <- Recommender(trainSet, method="UBCF", parameter = "Pearson")
recomm_model
recomm_list <- predict(recomm_model, recommTarget, n=2)
recomm_result <- as(recomm_list,"list")
unlist(recomm_result)   # character형
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
retire_long
names(retire_long) <- c('사용자','조건','rating')
retire_long <- subset(retire_long, rating != 0)
retire_long
retire_real <- as(retire_long, "realRatingMatrix")
dim(retire_real)
retire_real
as(retire_real, "matrix")
trainSet <- retire_real[c(1:(nrow(retire_real)-1)),]  # 학습데이터
trainSet
as(trainSet, 'matrix')
recommTarget <- retire_real[nrow(retire_real),] # 마지막 행 데이터
recommTarget
as(recommTarget, 'matrix')
recomm_model <- Recommender(trainSet, method="UBCF", parameter = "Pearson")
recomm_model
recomm_list <- predict(recomm_model, recommTarget, n=2)
recomm_result <- as(recomm_list,"list")
unlist(recomm_result)   # character형
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
Rserve::Rserve(args="--RS- encoding utf8")
retire <- read.csv("C:/NCS/Rwork-II/data/retire_product2.csv")
retire # user movie1 movie2 movie3 movie4 movie5
retire_long <- melt(id=1, retire)
retire_long
names(retire_long) <- c('사용자','조건','rating')
# 0점 제외
retire_long <- subset(retire_long, rating != 0)
retire_long
retire_real <- as(retire_long, "realRatingMatrix")
dim(retire_real)
retire_real
# 내용 보기
as(retire_real, "matrix")
# 추천 모델 생성
# 학습데이터 생성
trainSet <- retire_real[c(1:(nrow(retire_real)-1)),]  # 학습데이터
trainSet
as(trainSet, 'matrix')
# 추천 대상자 선정
recommTarget <- retire_real[nrow(retire_real),] # 마지막 행 데이터
recommTarget
as(recommTarget, 'matrix')
# 추천 모델생성
recomm_model <- Recommender(trainSet, method="UBCF", parameter = "Pearson")
recomm_model
# 상품추천
recomm_list <- predict(recomm_model, recommTarget, n=2)
recomm_result <- as(recomm_list,"list")
#recomm_result    # list형식으로 반환되서 java에서 string으로 형변환X
unlist(recomm_result)   # character형
recomm_list <- predict(recomm_model, recommTarget, n=4)
recomm_result <- as(recomm_list,"list")
unlist(recomm_result)   # character형
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
setwd('C:\\NCS\\Spring\\workspace(spring)\\Project_finance\\src\\main\\webapp\\resources\\data')
Rserve::Rserve(FALSE,port=6311,args='--RS-encoding utf8 --no-save --slave --encoding utf8  --internet2')
